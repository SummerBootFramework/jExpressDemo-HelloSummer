############################################################
# 1. gRpc.client provider                                  #
# Format> ip1:port1, ip2:port2, ..., ipN:portN             #
# Example> 192.168.1.10:8424, 127.0.0.1:8425, 0.0.0.0:8426 #
############################################################
#gRpc.client.LoadBalancing.servers=0.0.0.0:8424, 0.0.0.0:8425
gRpc.client.LoadBalancing.servers=0.0.0.0:8425
## In case you have more than one gRPC client needs to connect to different gRPC services, you can set this to distinguish them
gRpc.client.LoadBalancing.scheme=panda2
## available options: ROUND_ROBIN, PICK_FIRST
#gRpc.client.LoadBalancing.policy=ROUND_ROBIN

## grpc:///
## grpc://127.0.0.1:8424
## unix:/tmp/grpcsrver.socket
#gRpc.client.target.url=grpc:///

#gRpc.client.ssl.Protocols=TLSv1.3
#gRpc.client.ssl.ciphers=


###########################
# 2. gRpc.client keystore #
###########################
## Path to key store file. Use SSL/TLS when keystore is provided, otherwise use plain socket
gRpc.client.ssl.KeyStore=keystore.p12
gRpc.client.ssl.KeyStorePwd=ENC(ske5uDj3pqLZv1B5Dp0mhg==)
gRpc.client.ssl.KeyAlias=server3_4096.jexpress.org
gRpc.client.ssl.KeyPwd=ENC(ske5uDj3pqLZv1B5Dp0mhg==)



#############################
# 3. gRpc.client truststore #
#############################
## Path to trust store file. Auth the remote peer certificate when a truststore is provided, otherwise blindly trust all remote peer certificate
gRpc.client.ssl.TrustStore=truststore_grpc_client.p12
gRpc.client.ssl.TrustStorePwd=ENC(ske5uDj3pqLZv1B5Dp0mhg==)

## NOT for PRODUCTION! Set server certificate DNS name here when server is not yet running on its certificate Subject Alternative Names (SAN)
gRpc.client.ssl.overrideAuthority=server2.4096.jexpress.org



##############################################################################################
# 4. gRpc.client Channel Settings                                                            #
# The following settings are for NettyChannelBuilder, which is used to create a gRPC channel #
##############################################################################################
## string: default null
#gRpc.client.channel.userAgent=

## int: default 4194304 if not set
#gRpc.client.channel.maxInboundMessageSize=

## int: default 8192 if not set
#gRpc.client.channel.maxHeaderListSize=

## long: default 1048576L if not set
#gRpc.client.channel.perRpcBufferLimit=

## int: default 5 if not set
#gRpc.client.channel.maxHedgedAttempts=

## long: default 1800 (30 minutes) if not set
#gRpc.client.channel.idleTimeoutSeconds=

## boolean: default false if not set. keepAliveWithoutCalls is used when you are willing to spend client, server, and network resources to have lower latency for very infrequent RPCs
#gRpc.client.channel.keepAliveWithoutCalls=

## long: default Long.MAX_VALUE (never) if not set. The interval in seconds between PING frames.
#gRpc.client.channel.keepAliveTimeSeconds=

## long: default 20 seconds if not set. The timeout in seconds for a PING frame to be acknowledged. If sender does not receive an acknowledgment within this time, it will close the connection.
#gRpc.client.channel.keepAliveTimeoutSeconds=

## boolean: default true if not set
#gRpc.client.channel.retryEnabled=

## int: default 5 if not set
#gRpc.client.channel.maxRetryAttempts=

## int: default 16777216L if not set
#gRpc.client.channel.retryBufferSize=