################################
# 1.1 LDAP connection settings #
################################
## set it true only when LDAP is implemented by Microsoft Active Directory (AD)
## false when use others like Open LDAP, IBM Tivoli, Apache
#ldap.type.AD=false

## LDAP will be disabled when host is not provided
#ldap.host=

## LDAP 389, LDAP over SSL 636, AD global 3268, AD global voer SSL 3269
#ldap.port=0

#ldap.baseDN=
#ldap.bindingUserDN=
#ldap.bindingPassword=DEC(plain text inside DEC() will be automatically encrypted by app root password when the application starts or is running)
#ldap.PasswordAlgorithm=SHA3-256
#ldap.schema.TenantGroup.ou=


############################
# 1.2 LDAP Client keystore #
############################
## Path to key store file. Use SSL/TLS when keystore is provided, otherwise use plain socket
#ldap.ssl.KeyStore=
#ldap.ssl.KeyStorePwd=DEC(plain text inside DEC() will be automatically encrypted by app root password when the application starts or is running)
#ldap.ssl.KeyAlias=
#ldap.ssl.KeyPwd=DEC(plain text inside DEC() will be automatically encrypted by app root password when the application starts or is running)

#ldap.ssl.protocol=TLSv1.3
#ldap.SSLConnectionFactoryClass=org.summerboot.jexpress.integration.ldap.LdapSSLConnectionFactory1


##############################
# 1.3 LDAP Client truststore #
##############################
## Path to trust store file. Auth the remote peer certificate when a truststore is provided, otherwise blindly trust all remote peer certificate
#ldap.ssl.TrustStore=
#ldap.ssl.TrustStorePwd=DEC(plain text inside DEC() will be automatically encrypted by app root password when the application starts or is running)



#########################################################################################################################################################################
# 2. JWT                                                                                                                                                                #
# Example> To generate the keypair manually:                                                                                                                            #
# Example> step1. generate keypair: openssl genrsa -des3 -out keypair.pem 4096                                                                                          #
# Example> step2. export public key: openssl rsa -in keypair.pem -outform PEM -pubout -out jwt_public.key                                                               #
# Example> step3. export private key: openssl rsa -in keypair.pem -out private_unencrypted.pem -outform PEM                                                             #
# Example> step4. encrypt and convert private key from PKCS#1 to PKCS#8: openssl pkcs8 -topk8 -inform PEM -outform PEM -in private_unencrypted.pem -out jwt_private.key #
#########################################################################################################################################################################
## Path to an encrypted RSA private key file in PKCS#8 format with minimal 2048 key size
jwt.asymmetric.SigningKeyFile=jwt_private.key

## The password of this private key
jwt.asymmetric.SigningKeyPwd=ENC(ske5uDj3pqLZv1B5Dp0mhg==)

## Path to the public key file corresponding to this private key
jwt.asymmetric.ParsingKeyFile=jwt_public.key

## HMAC-SHA key for bothe signing and parsing, it will be ignored when asymmetric one is specified.
## Use this command to generate this key: java -jar <app>.jar -jwt <HS256, HS384, HS512>
#jwt.symmetric.key=DEC(plain text inside DEC() will be automatically encrypted by app root password when the application starts or is running)

#jwt.ttl.minutes=1440
#jwt.issuer=


########################################################################################################################
# 3. Role mapping                                                                                                      #
# Map the role (defined as @RolesAllowed({"AppAdmin"})) with user group (no matter the group is defined in LDAP or DB) #
# Format> roles.<role name>.groups=csv list of groups                                                                  #
# Format> roles.<role name>.users=csv list of users                                                                    #
# Example> the following example maps one group(AppAdmin_Group) and two users(johndoe, janejoe) to a role(AppAdmin)    #
# Example> roles.AppAdmin.groups=AppAdmin_Group                                                                        #
# Example> roles.AppAdmin.users=johndoe, janejoe                                                                       #
########################################################################################################################
roles.AppAdmin.groups=<LDAP.AppAdminGroupName>
#roles.AppAdmin.users=<LDAP.AppAdminUserName>
