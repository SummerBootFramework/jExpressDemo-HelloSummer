/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 764.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 1.0], [47.9, 1.0], [48.0, 1.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 1.0], [64.0, 1.0], [64.1, 1.0], [64.2, 1.0], [64.3, 1.0], [64.4, 1.0], [64.5, 1.0], [64.6, 1.0], [64.7, 1.0], [64.8, 1.0], [64.9, 1.0], [65.0, 1.0], [65.1, 1.0], [65.2, 1.0], [65.3, 1.0], [65.4, 1.0], [65.5, 1.0], [65.6, 1.0], [65.7, 1.0], [65.8, 1.0], [65.9, 1.0], [66.0, 1.0], [66.1, 1.0], [66.2, 1.0], [66.3, 1.0], [66.4, 1.0], [66.5, 1.0], [66.6, 1.0], [66.7, 1.0], [66.8, 1.0], [66.9, 1.0], [67.0, 1.0], [67.1, 1.0], [67.2, 1.0], [67.3, 1.0], [67.4, 1.0], [67.5, 1.0], [67.6, 1.0], [67.7, 1.0], [67.8, 1.0], [67.9, 1.0], [68.0, 1.0], [68.1, 1.0], [68.2, 1.0], [68.3, 1.0], [68.4, 1.0], [68.5, 1.0], [68.6, 1.0], [68.7, 1.0], [68.8, 1.0], [68.9, 1.0], [69.0, 1.0], [69.1, 1.0], [69.2, 1.0], [69.3, 1.0], [69.4, 1.0], [69.5, 1.0], [69.6, 1.0], [69.7, 1.0], [69.8, 1.0], [69.9, 1.0], [70.0, 1.0], [70.1, 1.0], [70.2, 1.0], [70.3, 1.0], [70.4, 1.0], [70.5, 1.0], [70.6, 1.0], [70.7, 1.0], [70.8, 1.0], [70.9, 1.0], [71.0, 1.0], [71.1, 1.0], [71.2, 1.0], [71.3, 1.0], [71.4, 1.0], [71.5, 1.0], [71.6, 1.0], [71.7, 1.0], [71.8, 1.0], [71.9, 1.0], [72.0, 1.0], [72.1, 1.0], [72.2, 1.0], [72.3, 1.0], [72.4, 1.0], [72.5, 1.0], [72.6, 1.0], [72.7, 1.0], [72.8, 1.0], [72.9, 1.0], [73.0, 1.0], [73.1, 1.0], [73.2, 1.0], [73.3, 1.0], [73.4, 1.0], [73.5, 1.0], [73.6, 1.0], [73.7, 1.0], [73.8, 1.0], [73.9, 1.0], [74.0, 1.0], [74.1, 1.0], [74.2, 1.0], [74.3, 1.0], [74.4, 1.0], [74.5, 1.0], [74.6, 1.0], [74.7, 1.0], [74.8, 1.0], [74.9, 1.0], [75.0, 1.0], [75.1, 1.0], [75.2, 1.0], [75.3, 1.0], [75.4, 1.0], [75.5, 1.0], [75.6, 1.0], [75.7, 1.0], [75.8, 1.0], [75.9, 1.0], [76.0, 1.0], [76.1, 1.0], [76.2, 1.0], [76.3, 1.0], [76.4, 1.0], [76.5, 1.0], [76.6, 1.0], [76.7, 1.0], [76.8, 1.0], [76.9, 1.0], [77.0, 1.0], [77.1, 1.0], [77.2, 1.0], [77.3, 1.0], [77.4, 1.0], [77.5, 1.0], [77.6, 1.0], [77.7, 1.0], [77.8, 1.0], [77.9, 1.0], [78.0, 1.0], [78.1, 1.0], [78.2, 1.0], [78.3, 1.0], [78.4, 1.0], [78.5, 1.0], [78.6, 1.0], [78.7, 1.0], [78.8, 1.0], [78.9, 1.0], [79.0, 1.0], [79.1, 1.0], [79.2, 1.0], [79.3, 1.0], [79.4, 1.0], [79.5, 1.0], [79.6, 1.0], [79.7, 1.0], [79.8, 1.0], [79.9, 1.0], [80.0, 1.0], [80.1, 1.0], [80.2, 1.0], [80.3, 1.0], [80.4, 1.0], [80.5, 1.0], [80.6, 1.0], [80.7, 1.0], [80.8, 1.0], [80.9, 1.0], [81.0, 1.0], [81.1, 1.0], [81.2, 1.0], [81.3, 1.0], [81.4, 1.0], [81.5, 1.0], [81.6, 1.0], [81.7, 1.0], [81.8, 1.0], [81.9, 1.0], [82.0, 1.0], [82.1, 1.0], [82.2, 1.0], [82.3, 1.0], [82.4, 1.0], [82.5, 1.0], [82.6, 1.0], [82.7, 1.0], [82.8, 1.0], [82.9, 1.0], [83.0, 1.0], [83.1, 1.0], [83.2, 1.0], [83.3, 1.0], [83.4, 1.0], [83.5, 1.0], [83.6, 1.0], [83.7, 1.0], [83.8, 1.0], [83.9, 1.0], [84.0, 1.0], [84.1, 1.0], [84.2, 1.0], [84.3, 1.0], [84.4, 1.0], [84.5, 1.0], [84.6, 1.0], [84.7, 1.0], [84.8, 1.0], [84.9, 1.0], [85.0, 1.0], [85.1, 1.0], [85.2, 1.0], [85.3, 1.0], [85.4, 1.0], [85.5, 1.0], [85.6, 1.0], [85.7, 1.0], [85.8, 1.0], [85.9, 1.0], [86.0, 1.0], [86.1, 1.0], [86.2, 1.0], [86.3, 1.0], [86.4, 1.0], [86.5, 1.0], [86.6, 1.0], [86.7, 1.0], [86.8, 1.0], [86.9, 1.0], [87.0, 1.0], [87.1, 1.0], [87.2, 1.0], [87.3, 1.0], [87.4, 1.0], [87.5, 1.0], [87.6, 1.0], [87.7, 1.0], [87.8, 1.0], [87.9, 2.0], [88.0, 2.0], [88.1, 2.0], [88.2, 2.0], [88.3, 2.0], [88.4, 2.0], [88.5, 2.0], [88.6, 2.0], [88.7, 2.0], [88.8, 2.0], [88.9, 2.0], [89.0, 2.0], [89.1, 2.0], [89.2, 2.0], [89.3, 2.0], [89.4, 2.0], [89.5, 2.0], [89.6, 2.0], [89.7, 2.0], [89.8, 2.0], [89.9, 2.0], [90.0, 2.0], [90.1, 2.0], [90.2, 2.0], [90.3, 2.0], [90.4, 2.0], [90.5, 2.0], [90.6, 2.0], [90.7, 2.0], [90.8, 2.0], [90.9, 2.0], [91.0, 2.0], [91.1, 2.0], [91.2, 2.0], [91.3, 2.0], [91.4, 2.0], [91.5, 2.0], [91.6, 2.0], [91.7, 2.0], [91.8, 2.0], [91.9, 2.0], [92.0, 2.0], [92.1, 2.0], [92.2, 2.0], [92.3, 3.0], [92.4, 3.0], [92.5, 3.0], [92.6, 3.0], [92.7, 3.0], [92.8, 3.0], [92.9, 3.0], [93.0, 3.0], [93.1, 3.0], [93.2, 3.0], [93.3, 3.0], [93.4, 3.0], [93.5, 3.0], [93.6, 3.0], [93.7, 3.0], [93.8, 3.0], [93.9, 3.0], [94.0, 3.0], [94.1, 3.0], [94.2, 4.0], [94.3, 4.0], [94.4, 4.0], [94.5, 4.0], [94.6, 4.0], [94.7, 4.0], [94.8, 4.0], [94.9, 4.0], [95.0, 4.0], [95.1, 4.0], [95.2, 4.0], [95.3, 4.0], [95.4, 5.0], [95.5, 5.0], [95.6, 5.0], [95.7, 5.0], [95.8, 5.0], [95.9, 5.0], [96.0, 5.0], [96.1, 5.0], [96.2, 5.0], [96.3, 5.0], [96.4, 6.0], [96.5, 6.0], [96.6, 6.0], [96.7, 6.0], [96.8, 6.0], [96.9, 6.0], [97.0, 6.0], [97.1, 6.0], [97.2, 7.0], [97.3, 7.0], [97.4, 7.0], [97.5, 7.0], [97.6, 7.0], [97.7, 7.0], [97.8, 8.0], [97.9, 8.0], [98.0, 8.0], [98.1, 9.0], [98.2, 9.0], [98.3, 9.0], [98.4, 10.0], [98.5, 10.0], [98.6, 10.0], [98.7, 11.0], [98.8, 11.0], [98.9, 12.0], [99.0, 12.0], [99.1, 13.0], [99.2, 14.0], [99.3, 15.0], [99.4, 16.0], [99.5, 18.0], [99.6, 20.0], [99.7, 23.0], [99.8, 28.0], [99.9, 36.0], [100.0, 721.0]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 1.0], [48.2, 1.0], [48.3, 1.0], [48.4, 1.0], [48.5, 1.0], [48.6, 1.0], [48.7, 1.0], [48.8, 1.0], [48.9, 1.0], [49.0, 1.0], [49.1, 1.0], [49.2, 1.0], [49.3, 1.0], [49.4, 1.0], [49.5, 1.0], [49.6, 1.0], [49.7, 1.0], [49.8, 1.0], [49.9, 1.0], [50.0, 1.0], [50.1, 1.0], [50.2, 1.0], [50.3, 1.0], [50.4, 1.0], [50.5, 1.0], [50.6, 1.0], [50.7, 1.0], [50.8, 1.0], [50.9, 1.0], [51.0, 1.0], [51.1, 1.0], [51.2, 1.0], [51.3, 1.0], [51.4, 1.0], [51.5, 1.0], [51.6, 1.0], [51.7, 1.0], [51.8, 1.0], [51.9, 1.0], [52.0, 1.0], [52.1, 1.0], [52.2, 1.0], [52.3, 1.0], [52.4, 1.0], [52.5, 1.0], [52.6, 1.0], [52.7, 1.0], [52.8, 1.0], [52.9, 1.0], [53.0, 1.0], [53.1, 1.0], [53.2, 1.0], [53.3, 1.0], [53.4, 1.0], [53.5, 1.0], [53.6, 1.0], [53.7, 1.0], [53.8, 1.0], [53.9, 1.0], [54.0, 1.0], [54.1, 1.0], [54.2, 1.0], [54.3, 1.0], [54.4, 1.0], [54.5, 1.0], [54.6, 1.0], [54.7, 1.0], [54.8, 1.0], [54.9, 1.0], [55.0, 1.0], [55.1, 1.0], [55.2, 1.0], [55.3, 1.0], [55.4, 1.0], [55.5, 1.0], [55.6, 1.0], [55.7, 1.0], [55.8, 1.0], [55.9, 1.0], [56.0, 1.0], [56.1, 1.0], [56.2, 1.0], [56.3, 1.0], [56.4, 1.0], [56.5, 1.0], [56.6, 1.0], [56.7, 1.0], [56.8, 1.0], [56.9, 1.0], [57.0, 1.0], [57.1, 1.0], [57.2, 1.0], [57.3, 1.0], [57.4, 1.0], [57.5, 1.0], [57.6, 1.0], [57.7, 1.0], [57.8, 1.0], [57.9, 1.0], [58.0, 1.0], [58.1, 1.0], [58.2, 1.0], [58.3, 1.0], [58.4, 1.0], [58.5, 1.0], [58.6, 1.0], [58.7, 1.0], [58.8, 1.0], [58.9, 1.0], [59.0, 1.0], [59.1, 1.0], [59.2, 1.0], [59.3, 1.0], [59.4, 1.0], [59.5, 1.0], [59.6, 1.0], [59.7, 1.0], [59.8, 1.0], [59.9, 1.0], [60.0, 1.0], [60.1, 1.0], [60.2, 1.0], [60.3, 1.0], [60.4, 1.0], [60.5, 1.0], [60.6, 1.0], [60.7, 1.0], [60.8, 1.0], [60.9, 1.0], [61.0, 1.0], [61.1, 1.0], [61.2, 1.0], [61.3, 1.0], [61.4, 1.0], [61.5, 1.0], [61.6, 1.0], [61.7, 1.0], [61.8, 1.0], [61.9, 1.0], [62.0, 1.0], [62.1, 1.0], [62.2, 1.0], [62.3, 1.0], [62.4, 1.0], [62.5, 1.0], [62.6, 1.0], [62.7, 1.0], [62.8, 1.0], [62.9, 1.0], [63.0, 1.0], [63.1, 1.0], [63.2, 1.0], [63.3, 1.0], [63.4, 1.0], [63.5, 1.0], [63.6, 1.0], [63.7, 1.0], [63.8, 1.0], [63.9, 1.0], [64.0, 1.0], [64.1, 1.0], [64.2, 1.0], [64.3, 1.0], [64.4, 1.0], [64.5, 1.0], [64.6, 1.0], [64.7, 1.0], [64.8, 1.0], [64.9, 1.0], [65.0, 1.0], [65.1, 1.0], [65.2, 1.0], [65.3, 1.0], [65.4, 1.0], [65.5, 1.0], [65.6, 1.0], [65.7, 1.0], [65.8, 1.0], [65.9, 1.0], [66.0, 1.0], [66.1, 1.0], [66.2, 1.0], [66.3, 1.0], [66.4, 1.0], [66.5, 1.0], [66.6, 1.0], [66.7, 1.0], [66.8, 1.0], [66.9, 1.0], [67.0, 1.0], [67.1, 1.0], [67.2, 1.0], [67.3, 1.0], [67.4, 1.0], [67.5, 1.0], [67.6, 1.0], [67.7, 1.0], [67.8, 1.0], [67.9, 1.0], [68.0, 1.0], [68.1, 1.0], [68.2, 1.0], [68.3, 1.0], [68.4, 1.0], [68.5, 1.0], [68.6, 1.0], [68.7, 1.0], [68.8, 1.0], [68.9, 1.0], [69.0, 1.0], [69.1, 1.0], [69.2, 1.0], [69.3, 1.0], [69.4, 1.0], [69.5, 1.0], [69.6, 1.0], [69.7, 1.0], [69.8, 1.0], [69.9, 1.0], [70.0, 1.0], [70.1, 1.0], [70.2, 1.0], [70.3, 1.0], [70.4, 1.0], [70.5, 1.0], [70.6, 1.0], [70.7, 1.0], [70.8, 1.0], [70.9, 1.0], [71.0, 1.0], [71.1, 1.0], [71.2, 1.0], [71.3, 1.0], [71.4, 1.0], [71.5, 1.0], [71.6, 1.0], [71.7, 1.0], [71.8, 1.0], [71.9, 1.0], [72.0, 1.0], [72.1, 1.0], [72.2, 1.0], [72.3, 1.0], [72.4, 1.0], [72.5, 1.0], [72.6, 1.0], [72.7, 1.0], [72.8, 1.0], [72.9, 1.0], [73.0, 1.0], [73.1, 1.0], [73.2, 1.0], [73.3, 1.0], [73.4, 1.0], [73.5, 1.0], [73.6, 1.0], [73.7, 1.0], [73.8, 1.0], [73.9, 1.0], [74.0, 1.0], [74.1, 1.0], [74.2, 1.0], [74.3, 1.0], [74.4, 1.0], [74.5, 1.0], [74.6, 1.0], [74.7, 1.0], [74.8, 1.0], [74.9, 1.0], [75.0, 1.0], [75.1, 1.0], [75.2, 1.0], [75.3, 1.0], [75.4, 1.0], [75.5, 1.0], [75.6, 1.0], [75.7, 1.0], [75.8, 1.0], [75.9, 1.0], [76.0, 1.0], [76.1, 1.0], [76.2, 1.0], [76.3, 1.0], [76.4, 1.0], [76.5, 1.0], [76.6, 1.0], [76.7, 1.0], [76.8, 1.0], [76.9, 1.0], [77.0, 1.0], [77.1, 1.0], [77.2, 1.0], [77.3, 1.0], [77.4, 1.0], [77.5, 1.0], [77.6, 1.0], [77.7, 1.0], [77.8, 1.0], [77.9, 1.0], [78.0, 1.0], [78.1, 1.0], [78.2, 1.0], [78.3, 1.0], [78.4, 1.0], [78.5, 1.0], [78.6, 1.0], [78.7, 1.0], [78.8, 1.0], [78.9, 1.0], [79.0, 1.0], [79.1, 1.0], [79.2, 1.0], [79.3, 1.0], [79.4, 1.0], [79.5, 1.0], [79.6, 1.0], [79.7, 1.0], [79.8, 1.0], [79.9, 1.0], [80.0, 1.0], [80.1, 1.0], [80.2, 1.0], [80.3, 1.0], [80.4, 1.0], [80.5, 1.0], [80.6, 1.0], [80.7, 1.0], [80.8, 1.0], [80.9, 1.0], [81.0, 1.0], [81.1, 1.0], [81.2, 1.0], [81.3, 1.0], [81.4, 1.0], [81.5, 1.0], [81.6, 1.0], [81.7, 1.0], [81.8, 1.0], [81.9, 1.0], [82.0, 1.0], [82.1, 1.0], [82.2, 1.0], [82.3, 1.0], [82.4, 1.0], [82.5, 1.0], [82.6, 1.0], [82.7, 1.0], [82.8, 1.0], [82.9, 1.0], [83.0, 1.0], [83.1, 1.0], [83.2, 1.0], [83.3, 1.0], [83.4, 1.0], [83.5, 1.0], [83.6, 1.0], [83.7, 1.0], [83.8, 1.0], [83.9, 1.0], [84.0, 1.0], [84.1, 1.0], [84.2, 1.0], [84.3, 1.0], [84.4, 1.0], [84.5, 1.0], [84.6, 1.0], [84.7, 1.0], [84.8, 1.0], [84.9, 1.0], [85.0, 1.0], [85.1, 1.0], [85.2, 1.0], [85.3, 1.0], [85.4, 1.0], [85.5, 1.0], [85.6, 1.0], [85.7, 1.0], [85.8, 1.0], [85.9, 1.0], [86.0, 1.0], [86.1, 1.0], [86.2, 1.0], [86.3, 1.0], [86.4, 1.0], [86.5, 1.0], [86.6, 1.0], [86.7, 1.0], [86.8, 1.0], [86.9, 1.0], [87.0, 1.0], [87.1, 1.0], [87.2, 2.0], [87.3, 2.0], [87.4, 2.0], [87.5, 2.0], [87.6, 2.0], [87.7, 2.0], [87.8, 2.0], [87.9, 2.0], [88.0, 2.0], [88.1, 2.0], [88.2, 2.0], [88.3, 2.0], [88.4, 2.0], [88.5, 2.0], [88.6, 2.0], [88.7, 2.0], [88.8, 2.0], [88.9, 2.0], [89.0, 2.0], [89.1, 2.0], [89.2, 2.0], [89.3, 2.0], [89.4, 2.0], [89.5, 2.0], [89.6, 2.0], [89.7, 2.0], [89.8, 2.0], [89.9, 2.0], [90.0, 2.0], [90.1, 2.0], [90.2, 2.0], [90.3, 2.0], [90.4, 2.0], [90.5, 2.0], [90.6, 2.0], [90.7, 2.0], [90.8, 2.0], [90.9, 2.0], [91.0, 2.0], [91.1, 2.0], [91.2, 2.0], [91.3, 2.0], [91.4, 2.0], [91.5, 3.0], [91.6, 3.0], [91.7, 3.0], [91.8, 3.0], [91.9, 3.0], [92.0, 3.0], [92.1, 3.0], [92.2, 3.0], [92.3, 3.0], [92.4, 3.0], [92.5, 3.0], [92.6, 3.0], [92.7, 3.0], [92.8, 3.0], [92.9, 3.0], [93.0, 3.0], [93.1, 3.0], [93.2, 3.0], [93.3, 4.0], [93.4, 4.0], [93.5, 4.0], [93.6, 4.0], [93.7, 4.0], [93.8, 4.0], [93.9, 4.0], [94.0, 4.0], [94.1, 4.0], [94.2, 4.0], [94.3, 4.0], [94.4, 4.0], [94.5, 5.0], [94.6, 5.0], [94.7, 5.0], [94.8, 5.0], [94.9, 5.0], [95.0, 5.0], [95.1, 5.0], [95.2, 5.0], [95.3, 5.0], [95.4, 5.0], [95.5, 6.0], [95.6, 6.0], [95.7, 6.0], [95.8, 6.0], [95.9, 6.0], [96.0, 6.0], [96.1, 6.0], [96.2, 6.0], [96.3, 7.0], [96.4, 7.0], [96.5, 7.0], [96.6, 7.0], [96.7, 7.0], [96.8, 7.0], [96.9, 8.0], [97.0, 8.0], [97.1, 8.0], [97.2, 8.0], [97.3, 9.0], [97.4, 9.0], [97.5, 9.0], [97.6, 10.0], [97.7, 10.0], [97.8, 10.0], [97.9, 11.0], [98.0, 11.0], [98.1, 12.0], [98.2, 12.0], [98.3, 13.0], [98.4, 13.0], [98.5, 14.0], [98.6, 15.0], [98.7, 16.0], [98.8, 17.0], [98.9, 18.0], [99.0, 20.0], [99.1, 22.0], [99.2, 24.0], [99.3, 26.0], [99.4, 29.0], [99.5, 33.0], [99.6, 39.0], [99.7, 47.0], [99.8, 61.0], [99.9, 90.0], [100.0, 764.0]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 999922.0, "series": [{"data": [[0.0, 999922.0], [300.0, 3.0], [600.0, 3.0], [700.0, 2.0], [100.0, 50.0], [200.0, 10.0], [400.0, 7.0], [500.0, 3.0]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[0.0, 999203.0], [300.0, 79.0], [600.0, 3.0], [700.0, 2.0], [100.0, 576.0], [200.0, 115.0], [400.0, 17.0], [500.0, 5.0]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1999982.0, "series": [{"data": [[0.0, 1999982.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 137.60554649999193, "minX": 1.67104014E12, "maxY": 137.60554649999193, "series": [{"data": [[1.67104014E12, 137.60554649999193]], "isOverall": false, "label": "Thread Group - REST Example", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67104014E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 33.111111111111136, "series": [{"data": [[2.0, 0.2727272727272727], [3.0, 0.2682926829268293], [4.0, 0.3636363636363636], [5.0, 0.3], [6.0, 0.14285714285714285], [7.0, 0.0], [9.0, 0.42307692307692313], [10.0, 0.10000000000000002], [11.0, 0.75], [12.0, 0.26829268292682923], [13.0, 0.18], [14.0, 0.21875000000000008], [15.0, 0.0], [16.0, 0.4545454545454546], [17.0, 0.25581395348837205], [19.0, 0.0], [20.0, 0.4017857142857143], [21.0, 0.3134328358208955], [22.0, 0.22388059701492544], [23.0, 0.29687500000000017], [24.0, 0.27118644067796616], [25.0, 0.21938775510204084], [26.0, 0.5492957746478875], [27.0, 0.3529411764705884], [28.0, 0.3169398907103826], [29.0, 0.39130434782608703], [30.0, 0.5423728813559323], [31.0, 0.5945945945945944], [33.0, 0.30272952853598006], [32.0, 0.38095238095238093], [35.0, 0.3727810650887572], [34.0, 0.46613545816733065], [37.0, 0.4593128390596747], [36.0, 0.44299674267100986], [39.0, 0.6123711340206182], [38.0, 0.36210131332082574], [41.0, 0.4212962962962964], [40.0, 0.42644873699851366], [43.0, 0.4926900584795315], [42.0, 0.5440074906367045], [45.0, 0.4781886165351055], [44.0, 0.5160173160173173], [46.0, 0.5745471435206685], [47.0, 0.5606237816764137], [49.0, 0.5434652278177469], [48.0, 0.48097653772986687], [51.0, 0.5368481816432532], [50.0, 0.5895715023231797], [53.0, 0.6456658700847285], [52.0, 0.5280655263791869], [55.0, 0.5474117077890678], [54.0, 0.5846514352665514], [57.0, 0.7246416758544666], [56.0, 0.6437810945273632], [59.0, 0.6733502043994551], [58.0, 0.6351722680194465], [61.0, 0.7052053361234644], [60.0, 0.7803368003962368], [63.0, 0.6570298986903865], [62.0, 0.7206299212598435], [67.0, 0.6444376152427777], [66.0, 0.6512676056338021], [65.0, 0.6885184491477802], [64.0, 0.6310544611819238], [71.0, 0.7772143340094655], [70.0, 0.7000161108425964], [69.0, 0.6804290332059975], [68.0, 0.7045395924684051], [75.0, 0.7705337168424395], [74.0, 0.7820972886762362], [73.0, 0.7529431550622259], [72.0, 0.6465631196298738], [79.0, 0.7905804407316717], [78.0, 0.8574343626717454], [77.0, 0.7387295081967222], [76.0, 0.7282758620689648], [83.0, 0.7671859368300697], [82.0, 0.7864201016374937], [81.0, 0.7472309003124107], [80.0, 0.786294416243656], [87.0, 0.7268545140885522], [86.0, 0.806833769796731], [85.0, 0.818072702331963], [84.0, 0.7361812892359519], [91.0, 0.8579481397970665], [90.0, 0.8406504065040655], [89.0, 0.8192292411601101], [88.0, 0.7994982977960932], [95.0, 0.7830230826507834], [94.0, 0.8085999710438689], [93.0, 0.6908710352600247], [92.0, 0.824363992172213], [99.0, 0.8752101849627671], [98.0, 0.7782422175778242], [97.0, 0.8445413788925236], [96.0, 0.8412426614481419], [103.0, 0.8911178107606659], [102.0, 0.7487150993193495], [101.0, 0.7942300343905225], [100.0, 0.8234198079403763], [107.0, 0.7974299740109725], [106.0, 1.0005793071486506], [105.0, 0.8773174639505601], [104.0, 0.792174234034699], [111.0, 0.9981435643564416], [110.0, 1.0501323140252827], [109.0, 0.8037765746731824], [108.0, 0.9294233504759827], [115.0, 0.7658227848101287], [114.0, 0.8785330766892936], [112.0, 0.8941244239631287], [113.0, 1.0867376129992046], [119.0, 0.7524073341247852], [118.0, 0.8062338408503325], [117.0, 0.8847038527889588], [116.0, 0.8248934570067693], [123.0, 0.9000832639467109], [122.0, 0.8942244224422449], [121.0, 0.8721823135992081], [120.0, 0.7798177255316335], [127.0, 0.8800573255429364], [126.0, 1.0412550211703333], [125.0, 0.8827808251848303], [124.0, 0.8600966702470471], [135.0, 0.9341659610499579], [134.0, 0.9346677161812664], [133.0, 0.8457594844001761], [132.0, 0.877926131437487], [131.0, 0.8495824634655512], [130.0, 0.8593003042155593], [129.0, 0.9239984133280448], [128.0, 0.9449033135749705], [143.0, 0.8945335710041605], [142.0, 0.8114960629921268], [141.0, 0.8802050963331287], [140.0, 0.8577821979114878], [139.0, 0.8428495197438622], [138.0, 0.8214863870492981], [137.0, 1.0081731496897228], [136.0, 1.0609683203825466], [151.0, 0.8468945594607609], [150.0, 0.8981753972925257], [149.0, 0.8532311062431542], [148.0, 0.7781673679289383], [147.0, 1.0128097084105847], [146.0, 1.377568017767906], [145.0, 1.0936510581569716], [144.0, 1.0733654965895856], [158.0, 0.8989098116947484], [157.0, 1.023237556916313], [156.0, 0.9478952016485132], [155.0, 1.0001506024096396], [154.0, 1.0498941238750665], [153.0, 0.9305148039477187], [152.0, 0.9296405091621175], [159.0, 0.9828609096901751], [167.0, 1.0284769895753867], [166.0, 1.1633251833740859], [165.0, 1.0367523420610139], [164.0, 1.2169035153328376], [163.0, 1.0804114071996278], [162.0, 1.0304205189382645], [161.0, 1.0972972972972959], [160.0, 0.9915611814345995], [175.0, 1.0808017538365184], [174.0, 1.0263385146804835], [173.0, 0.9774514944939697], [172.0, 1.145038167938933], [171.0, 1.0849535080304313], [170.0, 0.9987125844866453], [169.0, 1.2864499517219192], [168.0, 1.2713156408808592], [183.0, 1.2146739130434763], [182.0, 0.9510037427696507], [181.0, 0.8123931623931606], [180.0, 1.0278949075575765], [179.0, 1.2356932153392355], [178.0, 0.9699530516431938], [177.0, 0.9885315382697628], [176.0, 1.1505996309963082], [191.0, 1.2533512064343182], [190.0, 1.0301563663440076], [189.0, 1.3403863845446158], [188.0, 1.0194338825517546], [187.0, 1.21277533039648], [186.0, 1.1708167330677295], [185.0, 1.0793287566742922], [184.0, 1.0275471698113223], [199.0, 1.0445544554455426], [198.0, 0.9783743475018633], [197.0, 1.3783031988873435], [196.0, 1.1421083284799083], [195.0, 1.052119129438716], [194.0, 0.9797344514325642], [193.0, 0.8588503130335816], [192.0, 1.0807730426164497], [206.0, 1.0073696145124678], [207.0, 1.0778032036613263], [205.0, 1.0627802690582968], [204.0, 1.245481294661621], [203.0, 1.0631808278867088], [202.0, 1.2299225438238885], [201.0, 1.1229977116704792], [200.0, 1.291225416036309], [208.0, 1.1993793638479446], [209.0, 0.8465414567109482], [210.0, 1.0412926391382402], [211.0, 1.0956663941128375], [213.0, 1.00509229789943], [214.0, 1.3504823151125407], [215.0, 1.6034682080924882], [212.0, 0.8739205526770287], [216.0, 1.4949640287769759], [217.0, 1.2279929577464799], [218.0, 2.501275510204085], [219.0, 2.834525025536267], [220.0, 1.5663881151346324], [221.0, 1.534863195057369], [222.0, 1.7430000000000017], [223.0, 1.636974789915966], [224.0, 1.4430379746835436], [225.0, 1.7181467181467212], [226.0, 4.2520661157024815], [227.0, 2.951219512195121], [228.0, 2.177777777777777], [229.0, 7.672268907563022], [230.0, 0.994252873563218], [231.0, 3.1428571428571446], [232.0, 3.7315436241610738], [233.0, 1.0225988700564976], [234.0, 1.1460674157303365], [235.0, 1.6563307493540063], [236.0, 0.910630291627469], [237.0, 1.132634176434298], [239.0, 1.5265700483091786], [238.0, 1.237762237762238], [240.0, 2.193548387096774], [241.0, 1.100456621004566], [242.0, 1.3581780538302257], [243.0, 0.9589816124469593], [244.0, 1.5773913043478276], [245.0, 0.7750965250965256], [246.0, 1.6643835616438347], [247.0, 0.9624060150375947], [248.0, 1.2078103207810325], [249.0, 1.2109256449165413], [250.0, 1.2275280898876408], [251.0, 1.6228070175438603], [252.0, 1.6477732793522275], [253.0, 2.1815181518151827], [254.0, 2.1223958333333335], [255.0, 2.3749999999999996], [257.0, 5.400862068965519], [256.0, 1.1730769230769231], [258.0, 4.720956719817761], [259.0, 2.3149171270718236], [260.0, 2.1176470588235303], [261.0, 0.9932088285229206], [262.0, 1.7732558139534886], [263.0, 1.925650557620818], [264.0, 1.77948717948718], [268.0, 2.459915611814344], [270.0, 3.5460122699386547], [269.0, 3.1822429906542067], [271.0, 4.466666666666668], [265.0, 1.604477611940299], [266.0, 5.108247422680412], [267.0, 4.09846827133479], [274.0, 10.2824427480916], [273.0, 4.215686274509803], [272.0, 2.147058823529412], [275.0, 2.956521739130434], [284.0, 7.508021390374328], [285.0, 4.323529411764706], [287.0, 4.977859778597785], [286.0, 3.7142857142857157], [276.0, 3.048387096774193], [277.0, 3.155440414507772], [278.0, 5.523076923076919], [279.0, 7.288461538461541], [280.0, 6.1184210526315805], [281.0, 7.5555555555555545], [282.0, 4.0410958904109595], [283.0, 4.649417852522636], [289.0, 14.066666666666663], [288.0, 3.8999999999999977], [290.0, 5.171929824561404], [291.0, 5.727272727272727], [292.0, 4.016064257028111], [293.0, 4.653846153846154], [294.0, 4.534246575342464], [295.0, 4.505882352941173], [296.0, 4.04663212435233], [302.0, 2.191709844559586], [303.0, 8.47457627118644], [300.0, 2.686567164179104], [301.0, 3.277108433734939], [297.0, 5.338028169014081], [298.0, 7.172231985940246], [299.0, 4.042682926829273], [305.0, 3.308943089430896], [304.0, 4.857142857142856], [306.0, 4.455357142857144], [307.0, 9.489247311827958], [308.0, 3.5000000000000044], [309.0, 5.788461538461539], [310.0, 9.640316205533592], [311.0, 4.30635838150289], [312.0, 6.947368421052635], [318.0, 6.333333333333333], [319.0, 5.421568627450984], [316.0, 3.5510204081632653], [317.0, 7.044854881266491], [313.0, 8.5], [314.0, 11.158163265306118], [315.0, 4.233333333333332], [321.0, 2.5403726708074545], [320.0, 5.495614035087723], [322.0, 6.775000000000002], [323.0, 3.690140845070423], [324.0, 3.617647058823529], [325.0, 5.0], [326.0, 6.504761904761904], [327.0, 7.8055555555555545], [329.0, 15.891891891891897], [328.0, 32.79054054054053], [334.0, 3.076923076923078], [335.0, 2.8400000000000007], [332.0, 2.4507042253521116], [333.0, 2.9696969696969697], [330.0, 2.922651933701656], [331.0, 2.4687500000000004], [337.0, 2.8026315789473695], [336.0, 2.570731707317074], [338.0, 2.0315315315315305], [339.0, 1.1428571428571435], [340.0, 1.9594017094017102], [341.0, 1.5049504950495038], [342.0, 1.1082089552238805], [343.0, 2.247933884297521], [344.0, 1.3333333333333328], [350.0, 4.654545454545455], [351.0, 3.3170731707317067], [348.0, 1.4363636363636365], [349.0, 2.169230769230768], [345.0, 2.411764705882353], [346.0, 2.159493670886075], [347.0, 3.352941176470589], [353.0, 5.165048543689323], [352.0, 5.6], [354.0, 5.654450261780106], [355.0, 4.1571428571428575], [356.0, 5.2678571428571415], [357.0, 3.0612244897959195], [358.0, 3.463562753036436], [359.0, 3.7194570135746563], [360.0, 3.842482100238667], [366.0, 5.2341650671785045], [367.0, 2.302439024390244], [364.0, 2.548571428571427], [365.0, 4.211956521739131], [361.0, 3.4150943396226405], [362.0, 3.9421965317919083], [363.0, 2.649253731343286], [369.0, 1.992805755395684], [368.0, 2.204545454545457], [370.0, 4.709401709401708], [371.0, 2.972222222222224], [372.0, 3.5970149253731347], [373.0, 2.6412213740458], [374.0, 2.8220338983050848], [375.0, 2.7869565217391292], [376.0, 2.275641025641025], [382.0, 2.5827814569536436], [383.0, 5.256965944272445], [380.0, 3.8579161028416813], [381.0, 5.368107302533543], [377.0, 1.4585635359116023], [378.0, 1.925274725274727], [379.0, 2.8900523560209415], [385.0, 3.2943722943722964], [384.0, 4.6330935251798575], [386.0, 1.7758620689655173], [387.0, 3.600000000000001], [388.0, 4.328358208955224], [389.0, 22.157894736842103], [390.0, 21.19565217391304], [391.0, 5.7181818181818205], [392.0, 7.111510791366901], [399.0, 4.540540540540541], [398.0, 4.499999999999999], [396.0, 5.150057273768616], [397.0, 9.221238938053093], [393.0, 4.9601593625498], [394.0, 5.549382716049384], [395.0, 6.682926829268293], [401.0, 3.3883495145631066], [400.0, 5.5060240963855405], [402.0, 4.163157894736843], [403.0, 3.7114093959731553], [404.0, 3.4965517241379316], [405.0, 2.2212389380530984], [406.0, 2.1249999999999996], [407.0, 2.6129032258064524], [408.0, 2.4218181818181805], [414.0, 4.025252525252525], [415.0, 3.9999999999999996], [412.0, 2.2142857142857135], [413.0, 2.938967136150235], [409.0, 2.888888888888889], [410.0, 2.5042016806722693], [411.0, 2.662337662337662], [417.0, 1.3402061855670102], [416.0, 3.1428571428571432], [418.0, 2.185770750988142], [419.0, 1.7731092436974798], [420.0, 2.8605769230769234], [421.0, 2.244604316546763], [422.0, 5.093306288032451], [423.0, 3.5223880597014907], [424.0, 0.8431372549019608], [425.0, 0.8596491228070177], [431.0, 0.9599999999999999], [429.0, 2.9761904761904767], [428.0, 0.7664041994750663], [430.0, 0.59375], [426.0, 7.060889929742394], [427.0, 0.8712446351931327], [433.0, 0.6195652173913042], [432.0, 0.6271186440677968], [434.0, 0.757575757575758], [435.0, 1.054054054054054], [436.0, 2.334862385321102], [437.0, 3.4476744186046506], [438.0, 4.896678966789669], [439.0, 4.533088235294121], [440.0, 2.804054054054056], [447.0, 1.0], [444.0, 3.1028667790893714], [445.0, 0.9571428571428572], [446.0, 1.3437500000000004], [441.0, 2.598581560283686], [442.0, 1.804308797127468], [443.0, 1.4946996466431108], [450.0, 2.3624161073825523], [449.0, 1.1869918699187003], [448.0, 0.9473684210526324], [451.0, 3.567567567567567], [460.0, 2.9457831325301207], [461.0, 4.324137931034489], [462.0, 5.250980392156859], [463.0, 4.772727272727272], [452.0, 5.284615384615384], [453.0, 4.27184466019417], [454.0, 4.391608391608392], [455.0, 3.259259259259261], [456.0, 4.569620253164558], [457.0, 5.301204819277107], [458.0, 4.062200956937801], [459.0, 6.392405063291142], [465.0, 2.263157894736842], [464.0, 1.9574468085106387], [466.0, 5.2914798206278055], [467.0, 6.417475728155342], [468.0, 4.69094922737307], [469.0, 6.616161616161621], [470.0, 1.9999999999999998], [471.0, 2.5967741935483875], [472.0, 5.198529411764707], [478.0, 6.5645933014354085], [479.0, 6.848329048843182], [476.0, 4.874074074074072], [477.0, 3.0287769784172665], [473.0, 3.4087591240875907], [474.0, 5.231666666666661], [475.0, 5.761111111111111], [481.0, 5.246835443037972], [480.0, 5.8294573643410885], [482.0, 4.011627906976746], [483.0, 3.604166666666666], [484.0, 4.984126984126984], [485.0, 4.0732984293193715], [486.0, 4.842592592592591], [487.0, 5.7272727272727275], [488.0, 4.113475177304967], [494.0, 7.093835242771416], [495.0, 4.268050541516248], [492.0, 2.671009771986972], [493.0, 4.949801849405552], [489.0, 6.49122807017544], [490.0, 4.768595041322313], [491.0, 4.185567010309276], [496.0, 6.303972366148525], [497.0, 4.462462462462461], [498.0, 2.4276315789473686], [499.0, 1.5522388059701504], [500.0, 4.642857142857143], [1.0, 0.0]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[137.59823599999928, 1.0909619999999443]], "isOverall": false, "label": "ping_with_delay_post_bodydata-Aggregated", "isController": false}, {"data": [[2.0, 0.20000000000000004], [3.0, 0.23809523809523814], [4.0, 0.36363636363636365], [5.0, 0.33333333333333337], [6.0, 0.27777777777777785], [7.0, 0.0], [9.0, 0.21739130434782608], [10.0, 0.0], [11.0, 1.0], [12.0, 0.2804878048780489], [13.0, 0.25999999999999995], [14.0, 0.18750000000000003], [15.0, 0.0], [16.0, 0.5833333333333334], [17.0, 0.21052631578947362], [18.0, 0.0], [19.0, 0.0], [20.0, 0.2962962962962963], [21.0, 0.38805970149253743], [22.0, 0.28358208955223874], [23.0, 0.5793650793650795], [24.0, 0.2956521739130434], [25.0, 0.27403846153846173], [26.0, 0.4154929577464789], [27.0, 0.642857142857143], [28.0, 0.5254237288135591], [29.0, 0.5109489051094892], [30.0, 0.5871559633027515], [31.0, 0.7727272727272732], [33.0, 0.3188775510204083], [32.0, 0.5647058823529412], [35.0, 0.4942528735632184], [34.0, 0.4412955465587039], [37.0, 0.5741088180112571], [36.0, 0.5060606060606061], [39.0, 0.5660792951541851], [38.0, 0.6055045871559637], [41.0, 0.5153583617747436], [40.0, 0.4898255813953486], [43.0, 0.5690936106983662], [42.0, 0.663551401869159], [45.0, 0.5439469320066335], [44.0, 0.5634920634920638], [47.0, 0.6115023474178399], [46.0, 0.65053019824804], [49.0, 0.6497539975399743], [48.0, 0.6237225147104367], [51.0, 0.6747796090456121], [50.0, 0.6324477688934753], [53.0, 0.8379211627394834], [52.0, 0.6785287795557666], [55.0, 0.6553631553631545], [54.0, 0.7367192060712211], [57.0, 0.8205128205128189], [56.0, 0.8144329896907201], [59.0, 0.8375764752318906], [58.0, 0.7415254237288114], [61.0, 0.8770978569584306], [60.0, 0.923444976076555], [63.0, 0.7962132536123552], [62.0, 0.9131396083385973], [67.0, 0.8095605242868149], [66.0, 0.8231730405149553], [65.0, 0.7786245353159845], [64.0, 0.7441647597253999], [71.0, 0.8721067747930362], [70.0, 0.9199095753269829], [69.0, 0.9153137340939033], [68.0, 0.8892315600102815], [75.0, 0.9455159112825435], [74.0, 1.000799520287828], [73.0, 0.8262184873949608], [72.0, 0.7763509006004001], [79.0, 0.9821785001425722], [78.0, 1.1497881645483166], [77.0, 1.2854422964264782], [76.0, 1.1722408026755828], [83.0, 1.1482107635953787], [82.0, 1.0838228972632136], [81.0, 1.0195379349686255], [80.0, 1.0353757616790789], [87.0, 1.261337543053964], [86.0, 1.153302763663407], [85.0, 1.1707946336429358], [84.0, 1.0651234567901284], [91.0, 1.1198519948519907], [90.0, 1.1913712853562484], [89.0, 1.1895306859205788], [88.0, 1.2937690788292333], [95.0, 1.1420118343195242], [94.0, 1.0020461853259288], [93.0, 1.0615901455767103], [92.0, 1.5935547517264066], [99.0, 1.133558341369332], [98.0, 1.1517166212534045], [97.0, 1.3067904250122058], [96.0, 1.1791815165294304], [103.0, 1.078545624053143], [102.0, 1.1586578293289171], [101.0, 1.014857142857141], [100.0, 1.0966259870782533], [107.0, 1.1969653592900062], [106.0, 1.2993555946104305], [105.0, 1.1888838164802582], [104.0, 1.14811181951937], [111.0, 1.4169764560099176], [110.0, 1.4625092798812147], [109.0, 1.266404715127701], [108.0, 1.1957116289246257], [115.0, 1.043206233030339], [114.0, 1.1836797066014684], [112.0, 1.2954492954492933], [113.0, 1.6036599227097075], [119.0, 1.0626066412915118], [118.0, 1.1402518454190196], [117.0, 1.2236371440835592], [116.0, 0.9896804674872534], [123.0, 1.4093470790377987], [122.0, 1.4292335706008905], [121.0, 1.436223218734428], [120.0, 1.166070719110048], [127.0, 1.4144911504424795], [126.0, 1.5133492511395767], [125.0, 1.3096229332699043], [124.0, 1.2109207708779455], [135.0, 1.230347156273082], [134.0, 1.3620941467250829], [133.0, 1.2316192721379102], [132.0, 1.3246505166275908], [131.0, 1.353909033745547], [130.0, 1.2669997827503792], [129.0, 1.2818728250553602], [128.0, 1.3278260869565226], [143.0, 1.1915434035559525], [142.0, 1.094292415949961], [141.0, 1.1370181142591769], [140.0, 1.2205782312925182], [139.0, 1.2492381078574322], [138.0, 1.1151461470327704], [137.0, 1.5397641366797659], [136.0, 1.8115447395756052], [151.0, 1.1704798220527495], [150.0, 1.70684553166305], [149.0, 1.5634615384615402], [148.0, 1.3489439853076182], [147.0, 1.4120473657113422], [146.0, 1.4518083348632311], [145.0, 1.326657691013126], [144.0, 1.3772365805168993], [158.0, 1.2080958931027668], [157.0, 1.6216216216216242], [156.0, 1.203554119547659], [155.0, 1.2935695738506194], [154.0, 1.4475450835856303], [153.0, 1.2322631787554514], [152.0, 1.5412181303116068], [159.0, 1.6656515118555608], [167.0, 1.6664983590002536], [166.0, 1.448395061728395], [165.0, 1.190108564535583], [164.0, 1.7683378612002953], [163.0, 1.4839243498817947], [162.0, 1.3355803048065669], [161.0, 1.4582015363759586], [160.0, 1.4922376873661667], [175.0, 1.4917213370821636], [174.0, 1.1921321451858276], [173.0, 1.2642951251646908], [172.0, 1.7098334228909249], [171.0, 2.060238443840196], [170.0, 1.803934214769433], [169.0, 1.5652871350657662], [168.0, 1.7569014084507062], [183.0, 1.4526666666666668], [182.0, 1.4803854094975901], [181.0, 1.1124171831587908], [180.0, 1.373053701938353], [179.0, 1.5777582159624448], [178.0, 1.1600095670892134], [177.0, 1.3948730589105256], [176.0, 1.447009928422999], [191.0, 1.5581395348837241], [190.0, 1.1831515607371208], [189.0, 1.5565177757520523], [188.0, 1.2886468370339337], [187.0, 1.3399646330680852], [186.0, 1.290703646635849], [185.0, 1.2861978187288479], [184.0, 1.3884702336096426], [199.0, 1.3031809145129238], [198.0, 1.380090497737555], [197.0, 1.7733050847457656], [196.0, 1.591093117408906], [195.0, 1.5659090909090918], [194.0, 1.5176803394625176], [193.0, 1.0843644544431914], [192.0, 1.5573770491803272], [200.0, 10.807913669064755], [201.0, 7.75233902036325], [202.0, 1.762328213419564], [203.0, 2.015151515151514], [204.0, 3.179597085297901], [205.0, 4.124131944444447], [206.0, 1.6083682008368223], [207.0, 2.1299249530956854], [208.0, 1.7580398162327717], [209.0, 1.1796690307328588], [210.0, 3.9623161764705976], [211.0, 2.302141157811262], [212.0, 1.7612193056731598], [213.0, 1.5687660668380474], [214.0, 5.6510903426791215], [215.0, 2.86634844868735], [216.0, 2.231716147719038], [217.0, 1.9400000000000006], [218.0, 2.382653061224489], [219.0, 3.038894575230297], [220.0, 2.1944444444444438], [221.0, 1.5775784753363211], [222.0, 1.798], [223.0, 1.6960784313725497], [224.0, 1.5199063231850127], [225.0, 2.266416510318945], [226.0, 5.199170124481329], [227.0, 3.324840764331211], [228.0, 1.8715365239294721], [229.0, 7.957671957671959], [230.0, 1.0493358633776084], [231.0, 3.2666666666666684], [232.0, 3.5865384615384586], [233.0, 1.2156133828996276], [234.0, 1.5540983606557377], [235.0, 2.1810237203495655], [236.0, 0.8860153256704985], [237.0, 1.3540145985401457], [239.0, 1.264550264550265], [238.0, 1.4290780141843973], [241.0, 1.24079754601227], [242.0, 2.259023354564756], [243.0, 1.3258110014104363], [244.0, 1.5972461273666103], [245.0, 1.1684210526315815], [246.0, 2.143884892086331], [247.0, 1.003722084367246], [240.0, 2.4701986754966887], [248.0, 1.455459770114942], [249.0, 1.187594553706506], [250.0, 1.5644937586685168], [251.0, 1.6955017301038056], [252.0, 1.4364406779661019], [253.0, 1.8892508143322475], [254.0, 2.0233160621761663], [255.0, 2.142857142857143], [257.0, 6.582978723404252], [256.0, 1.5199999999999994], [258.0, 4.6853070175438605], [259.0, 2.427745664739883], [260.0, 2.395402298850575], [261.0, 1.3315315315315306], [262.0, 2.480446927374303], [263.0, 2.4569288389513098], [264.0, 2.7315789473684204], [268.0, 3.643478260869564], [270.0, 4.005780346820812], [269.0, 4.1214953271028065], [271.0, 4.863636363636363], [265.0, 1.68060836501901], [266.0, 5.0600000000000005], [267.0, 4.0600858369098685], [274.0, 10.209523809523809], [273.0, 4.596774193548389], [272.0, 1.787878787878788], [275.0, 5.264705882352942], [284.0, 8.942105263157897], [285.0, 5.439999999999999], [286.0, 4.451219512195124], [287.0, 4.272388059701493], [276.0, 4.760000000000002], [277.0, 3.2731958762886606], [278.0, 6.885245901639344], [279.0, 7.764150943396228], [280.0, 6.113924050632911], [281.0, 10.227272727272728], [282.0, 3.3537414965986394], [283.0, 4.868421052631586], [289.0, 13.367187499999996], [288.0, 4.230769230769228], [290.0, 5.2992957746478915], [291.0, 6.3999999999999995], [292.0, 4.256410256410256], [293.0, 4.411764705882353], [294.0, 5.578947368421052], [295.0, 4.691860465116278], [296.0, 3.7990430622009566], [302.0, 2.4186046511627897], [303.0, 6.888888888888888], [300.0, 2.925], [301.0, 3.8902439024390247], [297.0, 5.89928057553957], [298.0, 7.40819964349377], [299.0, 4.09090909090909], [305.0, 5.361538461538463], [304.0, 5.963636363636361], [306.0, 4.778761061946903], [307.0, 10.58445040214477], [308.0, 3.2124352331606216], [309.0, 7.787878787878788], [310.0, 10.780487804878057], [311.0, 3.911949685534592], [312.0, 6.4137931034482785], [318.0, 6.745098039215685], [319.0, 5.72164948453608], [316.0, 3.3409090909090904], [317.0, 7.382749326145542], [313.0, 9.111111111111112], [314.0, 10.747311827956992], [315.0, 3.526315789473684], [321.0, 2.718390804597702], [320.0, 5.427272727272723], [322.0, 6.02061855670103], [323.0, 4.202898550724639], [324.0, 3.6249999999999996], [325.0, 3.9583333333333353], [326.0, 5.384615384615386], [327.0, 7.731707317073172], [329.0, 24.352941176470594], [328.0, 33.111111111111136], [334.0, 3.1333333333333333], [335.0, 2.534188034188034], [332.0, 2.4966442953020116], [333.0, 2.5749999999999997], [330.0, 4.0233918128655], [331.0, 3.3636363636363638], [337.0, 3.262499999999999], [336.0, 2.458128078817735], [338.0, 2.435448577680528], [339.0, 1.5132978723404265], [340.0, 2.659192825112109], [341.0, 1.4257425742574252], [342.0, 1.101083032490975], [343.0, 2.1299999999999994], [344.0, 1.447963800904978], [350.0, 5.05], [351.0, 3.7500000000000004], [348.0, 1.947368421052632], [349.0, 2.4927536231884058], [345.0, 1.9750000000000005], [346.0, 2.0305343511450373], [347.0, 4.142857142857142], [353.0, 5.914285714285715], [352.0, 4.2105263157894735], [354.0, 6.121693121693122], [355.0, 4.695652173913043], [356.0, 5.382978723404255], [357.0, 2.7692307692307687], [358.0, 4.2736030828516345], [359.0, 3.8646788990825702], [360.0, 4.385749385749387], [366.0, 5.71809523809524], [367.0, 2.1170212765957452], [364.0, 2.7919463087248326], [365.0, 3.8940568475452224], [361.0, 1.781818181818182], [362.0, 4.263736263736264], [363.0, 3.02919708029197], [369.0, 2.120204603580561], [368.0, 2.179144385026735], [370.0, 4.786577181208062], [371.0, 3.181528662420384], [372.0, 3.0925925925925934], [373.0, 2.512720156555772], [374.0, 2.9062500000000013], [375.0, 3.1603773584905674], [376.0, 2.4691358024691357], [382.0, 3.0317460317460334], [383.0, 5.040404040404038], [380.0, 4.137203166226908], [381.0, 5.26300366300367], [377.0, 1.831842576028623], [378.0, 1.874157303370787], [379.0, 2.270270270270272], [385.0, 3.53846153846154], [384.0, 4.9937106918239005], [386.0, 2.4198473282442743], [387.0, 4.156250000000003], [388.0, 3.788944723618089], [389.0, 20.774193548387096], [390.0, 21.923076923076927], [391.0, 5.3461538461538485], [392.0, 5.766666666666668], [399.0, 5.917293233082708], [398.0, 4.0], [396.0, 5.455172413793102], [397.0, 9.186991869918701], [393.0, 6.312252964426879], [394.0, 5.865921787709496], [395.0, 8.830188679245282], [401.0, 2.777777777777778], [400.0, 6.445783132530119], [402.0, 4.792079207920792], [403.0, 4.640522875816992], [404.0, 2.7536231884057973], [405.0, 2.422018348623853], [406.0, 2.039370078740157], [407.0, 2.1733333333333342], [408.0, 2.7548387096774203], [414.0, 3.972375690607734], [415.0, 4.428571428571429], [412.0, 2.2627986348122877], [413.0, 2.928571428571429], [409.0, 2.1111111111111116], [410.0, 2.3303571428571423], [411.0, 2.1095890410958895], [417.0, 1.4545454545454546], [416.0, 3.1250000000000004], [418.0, 2.365853658536584], [419.0, 1.8942731277533045], [420.0, 2.676991150442478], [421.0, 2.4923664122137397], [422.0, 5.412451361867705], [423.0, 2.9786096256684504], [426.0, 7.438228438228434], [429.0, 3.125], [428.0, 0.5892857142857146], [430.0, 0.5762711864406778], [431.0, 2.1063829787234045], [425.0, 1.330275229357798], [424.0, 2.117117117117115], [427.0, 0.903669724770642], [433.0, 1.1704545454545445], [432.0, 1.326923076923077], [434.0, 1.0507614213197967], [435.0, 1.2363636363636366], [436.0, 2.419811320754717], [437.0, 3.6299065420560748], [438.0, 4.459770114942532], [439.0, 4.378277153558048], [440.0, 2.5680000000000014], [447.0, 1.787234042553192], [444.0, 3.161178509532058], [445.0, 1.0137457044673541], [446.0, 1.6122448979591832], [441.0, 2.7894736842105265], [442.0, 2.1652173913043464], [443.0, 1.5837837837837847], [450.0, 2.075812274368233], [451.0, 3.9847715736040654], [460.0, 2.678082191780822], [461.0, 3.552447552447552], [462.0, 5.204216073781298], [463.0, 5.203045685279189], [452.0, 4.770234986945169], [453.0, 4.984276729559743], [454.0, 4.586885245901636], [455.0, 3.2229729729729764], [449.0, 1.0298507462686568], [448.0, 0.8819444444444444], [456.0, 4.85714285714286], [457.0, 5.457685664939548], [458.0, 4.134615384615382], [459.0, 4.502824858757063], [465.0, 2.5555555555555554], [464.0, 2.166666666666667], [466.0, 6.352941176470589], [467.0, 6.345588235294116], [468.0, 4.6592427616926475], [469.0, 6.421487603305791], [470.0, 2.5], [471.0, 3.0294117647058822], [472.0, 5.891472868217056], [478.0, 6.080459770114947], [479.0, 6.480295566502459], [476.0, 5.360215053763441], [477.0, 3.750000000000001], [473.0, 3.970802919708028], [474.0, 5.390804597701148], [475.0, 6.330827067669169], [481.0, 5.945205479452055], [480.0, 5.7244897959183625], [482.0, 4.7162162162162184], [483.0, 3.6854460093896715], [484.0, 4.428571428571427], [485.0, 5.873684210526319], [486.0, 4.258064516129029], [487.0, 4.978260869565216], [488.0, 4.389312977099236], [494.0, 7.692633810280877], [495.0, 4.3123336291038195], [492.0, 2.7781350482315106], [493.0, 5.040595399188095], [489.0, 5.912280701754387], [490.0, 4.663865546218488], [491.0, 3.9230769230769207], [496.0, 6.270081490104765], [497.0, 4.234899328859058], [498.0, 2.1081081081081074], [499.0, 2.120567375886526], [500.0, 2.8181818181818183], [1.0, 0.5]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}, {"data": [[137.61295700000773, 1.4644129999999989]], "isOverall": false, "label": "ping_with_delay_get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2900000.0, "minX": 1.67104014E12, "maxY": 6066666.666666667, "series": [{"data": [[1.67104014E12, 2900000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.67104014E12, 6066666.666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67104014E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1.0909619999999443, "minX": 1.67104014E12, "maxY": 1.4644129999999989, "series": [{"data": [[1.67104014E12, 1.0909619999999443]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[1.67104014E12, 1.4644129999999989]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67104014E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1.0864229999999566, "minX": 1.67104014E12, "maxY": 1.4609869999999765, "series": [{"data": [[1.67104014E12, 1.0864229999999566]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[1.67104014E12, 1.4609869999999765]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67104014E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67104014E12, "maxY": 0.34967400000000437, "series": [{"data": [[1.67104014E12, 0.0]], "isOverall": false, "label": "ping_with_delay_post_bodydata", "isController": false}, {"data": [[1.67104014E12, 0.34967400000000437]], "isOverall": false, "label": "ping_with_delay_get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67104014E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.67104014E12, "maxY": 764.0, "series": [{"data": [[1.67104014E12, 764.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.67104014E12, 1.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.67104014E12, 8.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.67104014E12, 1.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.67104014E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.67104014E12, 0.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67104014E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 15698.0, "maxY": 7.0, "series": [{"data": [[68679.0, 0.0], [74847.0, 1.0], [82935.0, 1.0], [57807.0, 0.0], [57775.0, 0.0], [61299.0, 1.0], [15698.0, 7.0], [63951.0, 0.0], [64955.0, 1.0], [68138.0, 0.0], [69218.0, 0.0], [72438.0, 0.0], [76910.0, 1.0], [21774.0, 0.0], [93910.0, 0.0], [67729.0, 1.0], [72669.0, 1.0], [75893.0, 1.0], [81477.0, 1.0], [85685.0, 0.0], [89965.0, 0.0], [51356.0, 0.0], [53340.0, 0.0], [57268.0, 0.0], [59618.0, 2.0], [60030.0, 0.0], [62542.0, 0.0], [61762.0, 0.0], [80212.0, 1.0], [90120.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 93910.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 15698.0, "maxY": 7.0, "series": [{"data": [[68679.0, 0.0], [74847.0, 1.0], [82935.0, 1.0], [57807.0, 0.0], [57775.0, 0.0], [61299.0, 1.0], [15698.0, 7.0], [63951.0, 0.0], [64955.0, 1.0], [68138.0, 0.0], [69218.0, 0.0], [72438.0, 0.0], [76910.0, 1.0], [21774.0, 0.0], [93910.0, 0.0], [67729.0, 1.0], [72669.0, 1.0], [75893.0, 1.0], [81477.0, 1.0], [85685.0, 0.0], [89965.0, 0.0], [51356.0, 0.0], [53340.0, 0.0], [57268.0, 0.0], [59618.0, 2.0], [60030.0, 0.0], [62542.0, 0.0], [61762.0, 0.0], [80212.0, 1.0], [90120.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 93910.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33333.333333333336, "minX": 1.67104014E12, "maxY": 33333.333333333336, "series": [{"data": [[1.67104014E12, 33333.333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67104014E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33333.333333333336, "minX": 1.67104014E12, "maxY": 33333.333333333336, "series": [{"data": [[1.67104014E12, 33333.333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.67104014E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16666.666666666668, "minX": 1.67104014E12, "maxY": 16666.666666666668, "series": [{"data": [[1.67104014E12, 16666.666666666668]], "isOverall": false, "label": "ping_with_delay_post_bodydata-success", "isController": false}, {"data": [[1.67104014E12, 16666.666666666668]], "isOverall": false, "label": "ping_with_delay_get-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67104014E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33333.333333333336, "minX": 1.67104014E12, "maxY": 33333.333333333336, "series": [{"data": [[1.67104014E12, 33333.333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.67104014E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

